name: Continuous Deployment

on:
  workflow_dispatch: # Manual trigger via GitHub Actions UI
  push:
    branches: [main]
    paths:
      - "project/**"
      - "domains/**"
      - "test-infra/**"
      - ".github/workflows/continuous-deployment.yaml"
      - "justfile"
      - "flake.nix"

permissions:
  contents: read

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.filter.outputs.changes }}
    steps:
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            project: 'project/**'
            domains/larsgunnar.no: 'domains/larsgunnar.no/**'
            domains/kodehode.larsgunnar.no: 'domains/kodehode.larsgunnar.no/**'
            test-infra/server: 'test-infra/server/**'
            test-infra/web-app: 'test-infra/web-app/**'

  auto-apply:
    name: Auto Apply - ${{ matrix.domain }}
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.matrix != '[]' }}
    strategy:
      matrix:
        domain: ${{ fromJSON(needs.changes.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Plan changes
        id: plan
        run: |
          cd ${{ matrix.domain }}
          nix develop --command sops exec-env secrets.yaml "tofu init"
          nix develop --command sops exec-env secrets.yaml "tofu plan -detailed-exitcode" || exit_code=$?

          if [ ${exit_code:-0} -eq 2 ]; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            echo "üìã Changes detected in ${{ matrix.domain }} - proceeding with apply"
          elif [ ${exit_code:-0} -eq 0 ]; then
            echo "changes_detected=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No changes needed in ${{ matrix.domain }}"
          else
            echo "changes_detected=error" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Error planning changes in ${{ matrix.domain }}"
          fi
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}

      - name: Apply changes
        if: steps.plan.outputs.changes_detected == 'true'
        run: |
          cd ${{ matrix.domain }}
          nix develop --command sops exec-env secrets.yaml "tofu apply -auto-approve"
          echo "üöÄ Successfully applied changes to ${{ matrix.domain }}"
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}

      - name: Post apply status
        run: |
          if [ "${{ steps.plan.outputs.changes_detected }}" = "true" ]; then
            echo "üöÄ ${{ matrix.domain }}: Changes applied successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.plan.outputs.changes_detected }}" = "false" ]; then
            echo "‚úÖ ${{ matrix.domain }}: No changes needed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå ${{ matrix.domain }}: Error during planning" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail job if planning error
        if: steps.plan.outputs.changes_detected == 'error'
        run: |
          echo "Failing job due to planning error in ${{ matrix.domain }}"
          exit 1

  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [changes, auto-apply]
    if: always()
    steps:
      - name: Check overall apply status
        run: |
          if [ "${{ needs.changes.outputs.matrix }}" == "[]" ]; then
            echo "‚úÖ No infrastructure changes detected - no deployment needed"
          elif [ "${{ needs.auto-apply.result }}" == "success" ]; then
            echo "‚úÖ All infrastructure components processed successfully"
          else
            echo "‚ùå Infrastructure deployment failed"
            echo "Job result: ${{ needs.auto-apply.result }}"
            exit 1
          fi
