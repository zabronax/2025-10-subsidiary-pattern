name: Continuous Integration Plan

on:
  workflow_dispatch:
  pull_request:
    branches: [main]
    paths:
      - "domains/**"
      - "project/**"
      - "test-infra/**"
      - ".github/workflows/continuous-integration-plan.yaml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.filter.outputs.changes }}
    steps:
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            project: 'project/**'
            domains/larsgunnar.no: 'domains/larsgunnar.no/**'
            domains/kodehode.larsgunnar.no: 'domains/kodehode.larsgunnar.no/**'
            test-infra/server: 'test-infra/server/**'
            test-infra/web-app: 'test-infra/web-app/**'

  plan-iac:
    name: Plan ${{ matrix.domain }}
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.matrix != '[]' }}
    strategy:
      matrix:
        domain: ${{ fromJSON(needs.changes.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate plan
        run: |
          cd ${{ matrix.domain }}
          echo "🔧 Initializing OpenTofu for ${{ matrix.domain }}..."
          nix develop --command sops exec-env secrets.yaml "tofu init"

          echo "📋 Generating plan for ${{ matrix.domain }}..."
          nix develop --command sops exec-env secrets.yaml "tofu plan -out=plan.tfplan"

          echo "📄 Converting plan to readable format..."
          nix develop --command tofu show -no-color plan.tfplan > plan.txt

          echo "✅ Plan generated successfully for ${{ matrix.domain }}"
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}

      - name: Write summary
        run: |
          echo "## 🔍 OpenTofu Plan: ${{ matrix.domain }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if plan has changes
          if grep -q "No changes" "${{ matrix.domain }}/plan.txt"; then
            echo "✅ **No changes required** - Infrastructure is up to date" >> $GITHUB_STEP_SUMMARY
          else
            echo "📋 **Changes detected** - Review the plan below:" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```terraform' >> $GITHUB_STEP_SUMMARY
          cat "${{ matrix.domain }}/plan.txt" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
